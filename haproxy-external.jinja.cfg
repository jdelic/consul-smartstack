global
    log /dev/log    local0
    #log /dev/log   local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin-external.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy-1.5.14&openssl=1.0.1k&hsts=yes&profile=modern
    # set default parameters to the modern configuration
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK
    ssl-default-bind-options no-sslv3

defaults
    log	global
    mode	http
    option	httplog
    option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

{% if "http" in services.group_by_tagvalue("smartstack:protocol:") %}
{% set http_services = services.group_by_tagvalue("smartstack:protocol:")["http"] %}
frontend http-in
    bind {{localip}}:80
    reqadd X-Forwarded-Proto:\ http
    {% for svcname, svclist in http_services.group_by("name").items() %}
        {% for hostname in svclist.tagvalue_set("smartstack:hostname:") %}
            acl host_{{svcname}} hdr(host) -i {{hostname}}
        {% endfor %}
        {% for option in svclist.tagvalue_set("haproxy:frontend:option:") %}
            option {{option}}
        {% endfor %}
        use_backend backend-{{svcname}} if host_{{svcname}}
    {% endfor %}
{% endif %}


{% if "https" in services.group_by_tagvalue("smartstack:protocol:") %}
{% set https_services = services.group_by_tagvalue("smartstack:protocol:")["https"] %}
frontend https-in
    bind {{localip}}:443 ssl {% if maincert %}crt {{maincert}}{% endif %}{% for cert in services.tagvalue_set("crt") %} crt {{cert}}{% endfor %}
    reqadd X-Forwarded-Proto:\ https
    {% for svcname, svclist in https_services.group_by("name").items() %}
        {% for hostname in svclist.tagvalue_set("smartstack:hostname:") %}
            acl host_{{svcname}} hdr(host) -i {{hostname}}
        {% endfor %}
        {% for option in svclist.tagvalue_set("haproxy:frontend:option:") %}
            option {{option}}
        {% endfor %}
        use_backend backend-{{svcname}} if host_{{svcname}}
    {% endfor %}
{% endif %}


{% if "sni" in services.group_by_tagvalue("smartstack:protocol:") %}
    {% set sni_services =  services.group_by_tagvalue("smartstack:protocol:")["sni"] %}
    {% for name, svc in sni_services.group_by("name").items() %}
        frontend sni-in-{{name}}
        bind {{localip}}:443
        mode tcp
        {% for hostname in svc.tagvalue_set("smartstack:hostname:") %}
            use_backend backend-{{name}} if { req.ssl_sni -i {{hostname}} }
        {% endfor %}
    {% endfor %}
{% endif %}


{% for name, group in services.group_by("name").items() %}
backend backend-{{name}}
    {% for svc in group %}
        server {{name}}-srv{{loop.index}} {{svc.ip}}:{{svc.port}}
    {% endfor %}
    mode {% if group[0].mode %}{{group[0].mode}}{% else %}tcp{% endif %}
    {% for option in group.tagvalue_set("haproxy:backend:option:") %}
        option {{option}}
    {% endfor %}
{% endfor %}
